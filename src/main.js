const {HtmlTelegramBot, userInfoToString} = require("./bot");
const ChatGptService = require("./gpt");

class MyTelegramBot extends HtmlTelegramBot {
    constructor(token) {
        super(token);
        this.mode = null;
        this.list = [];
        this.user = {};
        this.count = 0;
    }

    async start(msg) {
        this.mode = "main"
        const text = this.loadMessage("main")
        await this.sendImage("main")
        await this.sendText(text)

         await this.showMainMenu(            {
            "start": "–ù–∞—á–∞—Ç—å",
             "profile": "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–∏–ª—è üòé",
             "opener" : "—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞",
             "message" : "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏",
            "date" : "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏",
            "gpt": "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT",
            "html": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è HTML"
            }
        )
    }

    async html(msg) {
        await this.sendHTML('<h3>–ü—Ä–∏–≤–µ—Ç! </h3>')
        const html = this.loadHtml("main")
        await this.sendHTML(html, {theme: "dark"})
    }
    async gpt(msg) {
        this.mode = "gpt"
        const text = this.loadMessage("gpt")
        await this.sendImage("gpt")
        await this.sendText(text)
    }

    async gptDialog(msg) {
        const text = msg.text;
        const myMessage = await this.sendText("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ ChatGPT... –û–∂–∏–¥–∞–π—Ç–µ")
        const answer = await chatgpt.sendQuestion("–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å", text)
        await this.editText(myMessage, answer)
    }

    async date(msg) {
      this.mode = "date"
        const text = this.loadMessage("date")
        await this.sendImage("date")
        await this.sendTextButtons(text, {
            "date_grande": "–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ",
            "date_robbie": "–ú–∞—Ä–≥–æ –†–æ–±–±–∏",
            "date_zendaya": "–ó–µ–Ω–¥–µ—è",
            "date_gosling": "–†–∞–π–Ω –ì–æ—Å–ª–∏–Ω–≥",
            "date_hardy": "–¢–æ–º –•–∞—Ä–¥–∏",
        })
    }

    async dateButton(callbackQuery) {
        const query = callbackQuery.data;
        await this.sendImage(query)
        await this.sendText("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ü—Ä–∏–≥–ª–∞—Å–∏ –¥–µ–≤—É—à–∫—É/–ø–∞—Ä–Ω—è –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ –∑–∞ 5 —Å–æ–æ–±—â–µ–Ω–∏–π")
        const prompt = this.loadPrompt(query)
        chatgpt.setPrompt(prompt)
    }

    async dateDialog(msg) {
        const text = msg.text
        const myMessage = await this.sendText("–ü–∞—Ä–µ–Ω—å –Ω–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç")
        const answer = await chatgpt.addMessage(text)
       // await this.sendText(answer)
        await this.editText(myMessage, answer)
    }

    async message(msg) {
        this.mode = "message"
        const text = this.loadMessage("message")
        await this.sendImage("message")
        await this.sendTextButtons(text, {
            "message_next": "–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "message_date": "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ",
        })
        this.list = []

    }

    async messageButton(callbackQuery) {
        const query =callbackQuery.data;
        const prompt = this.loadPrompt(query)
        const userChatHistory = this.list.join("\n\n")
        const myMessage = await this.sendText("ChatGPT –¥—É–º–∞–µ—Ç –Ω–∞–¥ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞...")
        const answer = await chatgpt.sendQuestion(prompt, userChatHistory)
        await this.editText(myMessage, answer)
    }

    async messageDialog(msg) {
        const text = msg.text
        this.list.push(text)
    }

    async profile(msg) {
        this.mode = "profile"
        const text = this.loadMessage("profile")
        await this.sendImage("profile")
        await this.sendText(text)
        this.user = {}
        this.count = 0;

        await this.sendText("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    }

    async profileDialog(msg) {
        const text = msg.text;
        this.count++;
        if (this.count === 1) {
        this.user["age"] = text;
        await this.sendText("–ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?")
        }
        if (this.count === 2) {
            this.user["occupation"] = text;
            await this.sendText("–£ –≤–∞—Å –µ—Å—Ç—å —Ö–æ–±–±–∏?")
        }
        if (this.count === 3) {
            this.user["hobby"] = text;
            await this.sendText("–ß—Ç–æ –≤–∞–º –ù–µ –Ω—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ª—é–¥—è—Ö?")
        }
        if (this.count === 4) {
            this.user["annous"] = text;
            await this.sendText("–¶–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?")
        }
        if (this.count === 5) {
            this.user["goals"] = text;
            const prompt = this.loadPrompt("profile")
            const info = userInfoToString(this.user);
            const myMessage = await this.sendText("ChatGPT –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")
            const answer = await chatgpt.sendQuestion(prompt, info);
            await this.editText(myMessage, answer)
        }
    }

    async opener(msg) {
        this.mode = "opener"
        const text = this.loadMessage("opener")
        await this.sendImage("opener")
        await this.sendText(text)
        this.user = {}
        this.count = 0;
        await this.sendText("–ò–º—è –ø–∞—Ä–Ω—è?")
    }

    async openerDialog(msg) {
        const text = msg.text;
        this.count++;
        if (this.count === 1) {
            this.user["name"] = text;
            await this.sendText("–°–∫–æ–ª—å–∫–æ –µ–º—É –ª–µ—Ç?")
        }
        if (this.count === 2) {
            this.user["age"] = text;
            await this.sendText("–û—Ü–µ–Ω–∏—Ç–µ –µ–≥–æ –≤–Ω–µ—à–Ω–æ—Å—Ç—å–ñ 1-10 –±–∞–ª–ª–æ–≤")
        }
        if (this.count === 3) {
            this.user["handsome"] = text;
            await this.sendText("–ö–µ–º –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç?")
        }
        if (this.count === 4) {
            this.user["occupation"] = text;
            await this.sendText("–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞")
        }
        if (this.count === 4) {
            this.user["goals"] = text;
            await this.sendText("–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞")
            const prompt = this.loadPrompt("opener")
            const info = userInfoToString(this.user);
            const myMessage = await this.sendText("ChatGPT –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –≤–∞—à–µ–≥–æ –æ—É–ø–µ–Ω–µ—Ä–∞")
            const answer = await chatgpt.sendQuestion(prompt, info);
            await this.editText(myMessage, answer)
        }
    }

     async  hello(msg) {
        if(this.mode === "gpt")
        await this.gptDialog(msg);
         else if(this.mode === "date")
             await this.dateDialog(msg)
        else if(this.mode === "message")
            await this.messageDialog(msg)
        else if(this.mode === "profile")
            await this.profileDialog(msg)
        else if(this.mode === "opener")
            await this.openerDialog(msg)
        else {
        const text = msg.text;
        await this.sendText("<b>–ü—Ä–∏–≤–µ—Ç!</b>")
         await this.sendText("<i>–ö–∞–∫ –¥–µ–ª–∞?</i>")
        await this.sendText(`–í—ã –ø–∏—Å–∞–ª–∏: ${text}`)

         await this.sendImage("avatar_main")

         await this.sendTextButtons("–ö–∞–∫–∞—è —É –≤–∞—Å —Ç–µ–º–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º?", {
             "theme_light":"–°–≤–µ—Ç–ª–∞—è",
             "theme_dark":"–¢–µ–º–Ω–∞—è",
         })
            }
    }
   async helloButton(callbackQuery) {
        const query = callbackQuery.data;
        if (query === "theme_light")
        await this.sendText( "–£ –≤–∞—Å —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞")
       else if (query === "theme_dark")
            await this.sendText( "–£ –≤–∞—Å —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞")
   }
}

const bot = new MyTelegramBot("7207101159:AAEj_ejzqcvhu1fqiz6iap4dlz1-lrEEwsU");

const chatgpt = new ChatGptService("gpt:ho7T8VOJeY6EVWR4okSxJFkblB3Tp7tf2SeYm4s7gNS3LPJN")
bot.onCommand( /\/start/, bot.start);
bot.onCommand( /\/html/, bot.html);
bot.onCommand( /\/gpt/, bot.gpt);
bot.onCommand( /\/date/, bot.date);
bot.onCommand( /\/message/, bot.message);
bot.onCommand( /\/profile/, bot.profile);
bot.onCommand( /\/opener/, bot.opener);
bot.onTextMessage(bot.hello);
bot.onButtonCallback(/^date_.*/ , bot.dateButton);
bot.onButtonCallback(/^message_.*/ , bot.messageButton);
bot.onButtonCallback( /^.*/ , bot.helloButton);